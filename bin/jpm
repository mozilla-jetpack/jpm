#!/usr/bin/env node

var VERSION = require("../package.json").version;
var program = require("commander");
var utils = require("../lib/utils");
var console = utils.console;
var run = require("../lib/run");
var test = require("../lib/test");
var xpi = require("../lib/xpi");
var init = require("../lib/init");
var jetpackRoot = process.env["JETPACK_ROOT"];
var manifest = utils.getManifest() || {};
var DEBUG_VALUES = ["binary", "retro", "verbose", "binaryArgs"];

program
  .version(VERSION)
  .option("--sdk-path <path>", "Path to the Addon-SDK to override SDK modules built into Firefox (JETPACK_PATH env variable can be used instead).")
  .option("-b, --binary <path>", "Path of Firefox binary to use.")
  .option("-p, --profile <path>", "Path or name of Firefox profile to use.")
  .option("-v, --verbose", "More verbose logging to stdout.")
  .option("--binary-args <CMDARGS>", "Pass additional arguments into Firefox.")
  .option("--filter <pattern>", "--filter=FILENAME[:TESTNAME] only run tests whose filenames match FILENAME and " +
                      "optionally match TESTNAME, both regexps")
  .option("--stop-on-error", "Stop running tests after the first failure")
  .option("--tbpl", "Print test output in TBPL format")
  .option("--times <n>", "Number of times to run tests")
  .option("--check-memory", "Enable leaked tracker that attempts to report compartments leaked")
  .option("--profile-memory", "Enable profiling of memory usage")
  .option("--force-aom", "In development flag for transitioning to new style addons; forces the lack of install.rdf/bootstrap.js creation regardless of what engine versions are running");

program
  .command("xpi")
  .description("Bundle the addon into an .xpi file")
  .action(prepare(function () {
    var manifest = utils.getManifest() || {};
    xpi(manifest, program).then(function (xpiPath) {
      console.log("Successfully created xpi at " + xpiPath);
    }, function (reason) {
      console.error("xpi creation failed: " + reason);
    });
  }));

program
  .command("test")
  .description("Run tests for current addon")
  .action(prepare(function () {
    test(manifest, program).then(null, console.error);
  }));

program
  .command("init")
  .description("Series of prompts to create a package.json for a new addon")
  .action(prepare(function () {
    init().then(process.exit);
  }));

program
  .command("run")
  .description("Install and run in Firefox the current addon")
  .action(prepare(function () {
    run(manifest, program).then(null, console.error);
  }));

program.parse(process.argv);

function prepare (actionCallback) {
  return function () {
    var args = Array.prototype.slice.call(arguments, 0);
    Object.keys(program).filter(function (option) {
      return ~DEBUG_VALUES.indexOf(option);
    }).forEach(function (option) {
      if (program.verbose && option !== "retro") {
        console.log(option, "set to", program[option]);
      }
      if (option === "forceAOM")
        console.warn("`forceAOM` flag set; this feature is experimental.");
    });
    console.log("Running " + program.mode + " on " + (manifest.title || manifest.name));

    actionCallback.apply(null, args);
  }
}

