#!/usr/bin/env node

var VERSION = require("../package.json").version;
var program = require("commander");
var console = require("../lib/utils").console;
var run = require("../lib/run");
var test = require("../lib/test");
var xpi = require("../lib/xpi");
var init = require("../lib/init");
var cmd = require("../lib/cmd");
var open = require("open");

program
  .version(VERSION)
  .option("-b, --binary <path>", "Path of Firefox binary to use.")
  .option("-p, --profile <path>", "Path or name of Firefox profile to use.")
  .option("-v, --verbose", "More verbose logging to stdout.")
  .option("-o, --overload [path]", "Overloads the built-in Firefox SDK modules with a local copy located at environment variable `JETPACK_ROOT` or `path` if supplied. Used for development on the SDK itself.")
  .option("-f, --filter <pattern>", "--filter=FILENAME[:TESTNAME] only run tests whose filenames match FILENAME and " +
                      "optionally match TESTNAME, both regexps")
  .option("--binary-args <CMDARGS>", "Pass additional arguments into Firefox.")
  .option("--prefs <path>", "Custom set user preferences (path to a json file)")
  .option("--stop-on-error", "Stop running tests after the first failure")
  .option("--do-not-quit", "Do not close Firefox on a test failure")
  .option("--tbpl", "Print test output in TBPL format")
  .option("--times <n>", "Number of times to run tests")
  .option("--debug", "Enable the add-on debugger when running the add-on")
  .option("--check-memory", "Enable leaked tracker that attempts to report compartments leaked")
  .option("--profile-memory", "Enable profiling of memory usage")
  .option("--retro", "In development flag for transitioning to new style addons; forces the lack of install.rdf/bootstrap.js creation regardless of what engine versions are running");

program
  .command("docs")
  .description("Open the JPM documentation")
  .action(function() {
    open("https://developer.mozilla.org/Add-ons/SDK/Tutorials/Getting_Started_%28jpm%29")
  });

program
  .command("xpi")
  .description("Bundle the addon into an .xpi file")
  .action(cmd.prepare("xpi", program, function (manifest) {
    xpi(manifest, program).then(function (xpiPath) {
      console.log("Successfully created xpi at " + xpiPath);
    }, function (reason) {
      console.error("xpi creation failed: " + reason);
    });
  }));

program
  .command("test")
  .description("Run tests for current addon")
  .action(cmd.prepare("test", program, function (manifest) {
    test(manifest, program).then(function(results) {
      process.exit(results.code);
    }, console.error);
  }));

program
  .command("init [name]")
  .description("Series of prompts to create a package.json for a new addon")
  .action(function (name) {
    init({ name: name }).then(process.exit);
  });

program
  .command("run")
  .description("Install and run in Firefox the current addon")
  .action(cmd.prepare("run", program, function (manifest) {
    run(manifest, program).then(null, console.error);
  }));

program.parse(process.argv);

// If no command (run, xpi, init, etc.) specified, display basic help
if (cmd.isEmptyCommand(program)) {
  program.help();
}

